Test Mode: Both APIs (Comparison)
Test Question: "Respond with exactly one word: What is 1+1?"
Test Date: 2025-09-30T22:26:34.881Z
============================================================

Starting tests with 34 models using Both APIs (Comparison)...
Each model will be tested with streaming and non-streaming calls


------------------------------------------------------------
Testing Claude-4-1-Opus ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-4-1-Opus

------------------------------------------------------------
Testing Claude-4-1-Opus-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<think>The user is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, which is one word, so I should respond with "Two".</think>

Two"
✓ Invoke API Non-streaming: "<think>The user wants me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, which is one word, so I should respond with "Two".</think>

Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "<think>The user is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, which is one word, so I should respond with "Two".</think>

Two"
🔍 Both APIs successful for Claude-4-1-Opus-Thinking

------------------------------------------------------------
Testing Claude-4-Opus ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-4-Opus

------------------------------------------------------------
Testing Claude-4-Opus-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<think>The user is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, which is a single word, so I can comply with this request.</think>

Two"
✓ Invoke API Non-streaming: "<think>The user is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, which is one word, so I should respond with "Two".</think>

Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "<think>The user is asking me to respond with exactly one word, and the question is "What is 1+1?" The answer to 1+1 is 2, which is one word, so I should respond with "Two".</think>

Two"
🔍 Both APIs successful for Claude-4-Opus-Thinking

------------------------------------------------------------
Testing Claude-4.5-Sonnet ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-4.5-Sonnet

------------------------------------------------------------
Testing Claude-4.5-Sonnet-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<think>The user is asking me what 1+1 equals, and they want me to respond with exactly one word. 

1+1 = 2

So I should respond with "Two" or "2". Since they asked for one word, I'll use "Two".</think>

Two"
✓ Invoke API Non-streaming: "<think>The user is asking me what 1+1 is, and they want me to respond with exactly one word.

1+1 = 2

So I should respond with: Two</think>

Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "<think>The user is asking me what 1+1 equals, and they want me to respond with exactly one word.

1+1 = 2

So I should respond with "Two" or "2". Since they asked for one word, I'll use "Two".</think>

Two"
🔍 Both APIs successful for Claude-4.5-Sonnet-Thinking

------------------------------------------------------------
Testing Claude-4-Sonnet ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-4-Sonnet

------------------------------------------------------------
Testing Claude-4-Sonnet-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<think>The human is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, so I should respond with "Two" (or "2" if numbers count as words, but "Two" is more clearly a single word).</think>

Two"
✓ Invoke API Non-streaming: "<think>The human is asking me to respond with exactly one word to the question "What is 1+1?". The answer to 1+1 is 2, so I should respond with "Two" as a single word.</think>

Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "<think>The human is asking for 1+1 and wants exactly one word as a response. The answer to 1+1 is 2, which is one word.</think>

Two"
🔍 Both APIs successful for Claude-4-Sonnet-Thinking

------------------------------------------------------------
Testing Claude-3-7-Sonnet-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<think>The question asks for exactly one word answer to what 1+1 is. The answer is 2, which is one word.</think>

Two"
✓ Invoke API Non-streaming: "<think>The question asks for exactly one word that answers "What is 1+1?"
The answer to 1+1 is 2.
I need to respond with exactly one word, which would be "Two" or "2".
Since "2" is a numeral and not strictly a word, I'll go with "Two" as my one-word answer.</think>

Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "<think>The question asks for exactly one word response to "What is 1+1?"
The answer to 1+1 is 2.
Since the answer is a number and not a word, I should respond with the word form of 2, which is "Two".
I need to provide exactly one word as requested.</think>

Two"
🔍 Both APIs successful for Claude-3-7-Sonnet-Thinking

------------------------------------------------------------
Testing Claude-3-7-Sonnet ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "2"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "2"
🔍 Both APIs successful for Claude-3-7-Sonnet

------------------------------------------------------------
Testing Claude-3-5-Sonnet-v2 ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "two"
✓ Invoke API Non-streaming: "two"

📡 Testing with Converse API:
✓ Converse API Streaming: "two"
✓ Converse API Non-streaming: "two"
🔍 Both APIs successful for Claude-3-5-Sonnet-v2

------------------------------------------------------------
Testing Claude-3-5-Sonnet ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-3-5-Sonnet

------------------------------------------------------------
Testing Claude-3-5-Haiku ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Claude-3-5-Haiku

------------------------------------------------------------
Testing Claude-3-Haiku ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Claude-3-Haiku

------------------------------------------------------------
Testing Llama-3-3-70b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-3-70b

------------------------------------------------------------
Testing Llama-3-2-1b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "2"
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-2-1b

------------------------------------------------------------
Testing Llama-3-2-3b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "2"
✓ Invoke API Non-streaming: "2"

📡 Testing with Converse API:
✓ Converse API Streaming: "2."
✓ Converse API Non-streaming: "2."
🔍 Both APIs successful for Llama-3-2-3b

------------------------------------------------------------
Testing Llama-3-2-11b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-2-11b

------------------------------------------------------------
Testing Llama-3-2-90b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-2-90b

------------------------------------------------------------
Testing Llama-3-1-8b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-1-8b

------------------------------------------------------------
Testing Llama-3-1-70b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-1-70b

------------------------------------------------------------
Testing Llama-3-1-405b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Llama-3-1-405b

------------------------------------------------------------
Testing Llama-3-8b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Llama-3-8b

------------------------------------------------------------
Testing Llama-3-70b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Llama-3-70b

------------------------------------------------------------
Testing Nova-Pro ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "2"
✓ Invoke API Non-streaming: "2"

📡 Testing with Converse API:
✓ Converse API Streaming: "2"
✓ Converse API Non-streaming: "2"
🔍 Both APIs successful for Nova-Pro

------------------------------------------------------------
Testing Nova-Lite ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "2"
✓ Invoke API Non-streaming: "2"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Nova-Lite

------------------------------------------------------------
Testing Nova-Micro ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "2"
✓ Invoke API Non-streaming: "2"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for Nova-Micro

------------------------------------------------------------
Testing GPT-OSS-120B ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for GPT-OSS-120B

------------------------------------------------------------
Testing GPT-OSS-20B ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two"
✓ Invoke API Non-streaming: "Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "two"
✓ Converse API Non-streaming: "two"
🔍 Both APIs successful for GPT-OSS-20B

------------------------------------------------------------
Testing GPT-OSS-120B-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<reasoning>The user asks: "Respond with exactly one word: What is 1+1?" The user wants a one-word answer. The answer is "Two". That's one word. So respond with "Two".</reasoning>Two"
✓ Invoke API Non-streaming: "<reasoning>The user asks: "Respond with exactly one word: What is 1+1?" They want a one-word answer. The answer is "Two". That's one word. So respond with "Two".</reasoning>Two"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two"
✓ Converse API Non-streaming: "Two"
🔍 Both APIs successful for GPT-OSS-120B-Thinking

------------------------------------------------------------
Testing GPT-OSS-20B-Thinking ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "<reasoning>The user says: "Respond with exactly one word: What is 1+1?" They want a single word answer. The answer to 1+1 is 2. But they want exactly one word. "Two" is a word. "2" is not a word, it's a number. They want a word. So answer: "Two". That is one word. So respond with "Two".</reasoning>Two"
✓ Invoke API Non-streaming: "<reasoning>The user says: "Respond with exactly one word: What is 1+1?" The answer is "two". They want exactly one word. So respond with "two".</reasoning>two"

📡 Testing with Converse API:
✓ Converse API Streaming: "two"
✓ Converse API Non-streaming: "two"
🔍 Both APIs successful for GPT-OSS-20B-Thinking

------------------------------------------------------------
Testing Mistral-7b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two. (I provided two words because I couldn't respond with just one word as "two" without using a word.) However, if you meant to ask for a one-word answer, I apologize for not being able to comply with that request. In that case, the answer would be "two" or "one-and-one.""
✓ Invoke API Non-streaming: "Two. (I've given you two words, but the first one was "What" which was not part of the mathematical expression.)"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two. (I provided two words because I followed your instruction with "exactly one word" by giving you the first answer, but then I had to provide the second number to complete the answer.) If you want a one-word answer, I'd say "Two" or "Sum". However, if you meant "one word answer: 1+1=?" then the answer is "Two"."
✓ Converse API Non-streaming: "Two. (I provided two words because I followed your instruction with "exactly one word" by giving you the first answer, but then I had to provide the second number to complete the answer.) If you want a one-word answer, I'd say "Two" or "Sum". However, if you meant "one word answer: 1+1=?" then the answer is "Two"."
🔍 Both APIs successful for Mistral-7b

------------------------------------------------------------
Testing Mixtral-8x7b ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two.

The word you are looking for is "two." The sum of 1 + 1 is equal to 2. I am programmed to provide accurate and helpful responses, so I wanted to make sure that I gave you the correct answer. If you have any other questions or need further clarification, please don't hesitate to ask. I'm here to help!"
✓ Invoke API Non-streaming: "Two.

The word you are looking for is "two." The sum of 1 + 1 is equal to 2. I am programmed to provide accurate and helpful responses, so I wanted to make sure that I gave you the correct answer to your question. Is there anything else I can help you with?"

📡 Testing with Converse API:
✓ Converse API Streaming: "Two.

The question you asked is a simple arithmetic addition problem. In this case, one plus one equals two. I provided a single-word response as you requested, but I wanted to make sure I was still providing a helpful and accurate answer."
✓ Converse API Non-streaming: "Two.

The question you asked is a simple arithmetic addition problem. In this case, one plus one equals two. I provided a single-word response as you requested, but I wanted to make sure I was still providing a helpful and accurate answer."
🔍 Both APIs successful for Mixtral-8x7b

------------------------------------------------------------
Testing Mistral-Large ⇢

📡 Testing with Invoke API:
✓ Invoke API Streaming: "Two."
✓ Invoke API Non-streaming: "Two."

📡 Testing with Converse API:
✓ Converse API Streaming: "Two."
✓ Converse API Non-streaming: "Two."
🔍 Both APIs successful for Mistral-Large
